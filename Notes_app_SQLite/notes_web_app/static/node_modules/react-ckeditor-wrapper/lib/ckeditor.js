"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var CKEditor = function (_Component) {
  (0, _inherits3["default"])(CKEditor, _Component);

  function CKEditor(props) {
    (0, _classCallCheck3["default"])(this, CKEditor);

    var _this = (0, _possibleConstructorReturn3["default"])(this, _Component.call(this, props));

    _this.changeListener = _this.changeListener.bind(_this);

    _this.state = {
      value: props.value,
      config: props.config || {},
      onChange: props.onChange
    };
    return _this;
  }

  CKEditor.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!window.CKEDITOR) {
      console.error("CKEditor not found");
      return;
    }

    this.instance = window.CKEDITOR.appendTo(this.divRef, this.state.config, this.state.value);

    this.instance.on('instanceReady', function (e) {
      //Set content and read only flag again. Can have changed since init.
      e.editor.setData(_this2.state.value);
      if ("readOnly" in _this2.state.config) _this2.instance.setReadOnly(_this2.state.config.readOnly);
    });
    this.instance.on('change', this.changeListener);
  };

  CKEditor.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
    if (!this.instance) {
      return;
    }

    //Only manipulate the editor when it's ready. The data will be set when it's
    //ready otherwise.
    if (this.instance.status === "ready") {

      if (this.state.value !== props.value) {
        // setData will move the cursor to the begining of the input
        this.instance.setData(props.value);
      }

      if (props.config && this.state.config !== props.config) {
        if ("readOnly" in props.config) this.instance.setReadOnly(props.config.readOnly);
      }
    }

    this.setState({
      value: props.value,
      config: props.config || {},
      onChange: props.onChange
    });
  };

  CKEditor.prototype.componentWillUnmount = function componentWillUnmount() {
    this.instance.removeListener("change", this.changeListener);
    this.instance.destroy();
  };

  CKEditor.prototype.changeListener = function changeListener() {
    this.state.value = this.instance.getData();
    this.handleChange();
  };

  CKEditor.prototype.handleChange = function handleChange() {
    this.state.onChange(this.state.value);
  };

  CKEditor.prototype.render = function render() {
    var _this3 = this;

    return _react2["default"].createElement("div", { ref: function ref(input) {
        return _this3.divRef = input;
      } });
  };

  return CKEditor;
}(_react.Component);

exports["default"] = CKEditor;
module.exports = exports['default'];